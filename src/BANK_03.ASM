;BANK_03 (Text Data)
;* =  $8000

	.include "includes/ram.inc"
	.include "includes/macros.inc"

; =============== S U B	R O U T	I N E =======================================

	bank_switch_func switch_case_8035

switch_case_8035:
	set bank_prev_345, bank_to_344
	set bank_switch_flag_6C, #$88 
	if_a_equal_cmp_addr bank_command_346, #0, loc_38047
	RTS
; ---------------------------------------------------------------------------

loc_38047:
	JSR	sub_3F76B
	JMP	loc_3804D
; ---------------------------------------------------------------------------

loc_3804D:
	return_from_bank_command
; End of function bank_switch_func

; ---------------------------------------------------------------------------
off_3805B:
	.include "text/bank_03_text.asm"

; =============== S U B	R O U T	I N E =======================================

sub_3F76B:
	a_to_stack data_2
	a_to_stack data_3
	
	LDA	#$5B 
	add_to_a char_type_id_35D
	STA	ptr_0
	LDA	#$80 
	ADC	#0
	STA	ptr_1

	read_word  data_2, {(ptr_0),Y}
	add_byte_to_word data_2, text_idx_35C

	read_word  ptr_0, {(data_2),Y}
	from_stack_to_a data_3
	from_stack_to_a data_2
	LDY	#0
	set has_ppu_data_to_upload_6F, #0
	LDX	#0
	set_inx {ppu_data_70,X}, #5
	set_inx {ppu_data_70,X}, #$40 
	INX
	set {ppu_data_70,X}, data_2
	DEX
	set_inx {ppu_data_70,X}, data_3
	INX
	set inv_spr_dscr1_30C, #0

loc_3F7CC:
	mult_a_by_8_byte byte_360
	STA	tilemapTypeUnk_30B
	mult_by_2_byte byte_361
	add_to_a tilemapTypeUnk_30B
	TAY
	set tilemapTypeUnk_30B, #0

loc_3F7E3:
	y_to_stack
	add_to_a tilemapTypeUnk_30B
	TAY
	if_a_not_equal_cmp_addr {byte_3F8DA,Y}, #0, loc_3F7FE
	mult_a_by_8_byte inv_spr_dscr1_30C
	TAY
	JSR	sub_3F8FA
	JMP	loc_3F820
; ---------------------------------------------------------------------------

loc_3F7FE:
	if_a_not_equal_cmp #1, loc_3F80F
	mult_a_by_8_byte inv_spr_dscr1_30C
	TAY
	JSR	sub_3F918
	JMP	loc_3F820
; ---------------------------------------------------------------------------

loc_3F80F:
	if_a_not_equal_cmp #2, loc_3F819
	JSR	sub_3F938
	JMP	loc_3F820
; ---------------------------------------------------------------------------

loc_3F819:
	if_a_not_equal_cmp #3, loc_3F820
	JSR	sub_3F955

loc_3F820:

	from_stack_to_y
	INC	tilemapTypeUnk_30B
	if_a_greater_cmp_addr tilemapTypeUnk_30B, #2, loc_3F7E3
	INC	inv_spr_dscr1_30C
	if_a_equal_cmp_addr inv_spr_dscr1_30C, #4, loc_3F839
	JMP	loc_3F7CC
; ---------------------------------------------------------------------------

loc_3F839:
	JSR	sub_3F972
	set ptr_0, sprite_secondByte_31B
	LDY	tilemapHeight_30A

loc_3F844:
	if_y_equal_cmp #0, loc_3F856
	mult_by_4_byte byte_35E
	add_to_a ptr_0
	STA	ptr_0
	DEY
	JMP	loc_3F844
; ---------------------------------------------------------------------------

loc_3F856:
	mult_by_4_byte tilemapWidth_308
	add_to_a ptr_0
	STA	ptr_0
	set inv_spr_dscr1_30C, #0

loc_3F865:
	a_to_stack data_2
	a_to_stack data_3
	set_inx {ppu_data_70,X}, #1
	INX
	set {ppu_data_70,X}, data_2
	DEX
	set_inx {ppu_data_70,X}, data_3
	INX
	set_inx {ppu_data_70,X}, ptr_0
	INC	ptr_0
	load_a_masked data_2, #$1F
	if_a_not_equal_cmp #$1F, loc_3F89B
	sub_byte_from_word data_2, #$1F
	JMP	loc_3F8A8
; ---------------------------------------------------------------------------

loc_3F89B:
	add_word_to_word_imm data_2, $1

loc_3F8A8:
	set_inx {ppu_data_70,X}, #1
	INX
	set {ppu_data_70,X}, data_2
	DEX
	set_inx {ppu_data_70,X}, data_3
	INX
	set_inx {ppu_data_70,X}, ptr_0
	from_stack_to_a data_3
	from_stack_to_a data_2
	INC	ptr_0
	JSR	sub_3FA27
	INC	inv_spr_dscr1_30C
	if_a_equal_cmp_addr inv_spr_dscr1_30C, #2, loc_3F8D6
	JMP	loc_3F865
; ---------------------------------------------------------------------------

loc_3F8D6:
	JSR	wait_for_ppu_data_upload_FC8C
	RTS
; End of function sub_3F76B

; ---------------------------------------------------------------------------
byte_3F8DA:
	.BYTE	2,  2,	0,  2,	2,  0,	0,  0,	1,  2,	3,  2,	1,  0,	3,  0
	.BYTE	2,  1,	0,  1,	2,  3,	0,  3,	1,  1,	3,  1,	1,  3,	3,  3

; =============== S U B	R O U T	I N E =======================================

sub_3F8FA:
	a_to_stack inv_spr_dscr1_30C
	set inv_spr_dscr1_30C, #0

loc_3F903:
	set_inx {ppu_data_70,X}, {(ptr_0),Y}
	INY
	INC	inv_spr_dscr1_30C
	if_a_greater_cmp_addr inv_spr_dscr1_30C, #8, loc_3F903
	from_stack_to_a inv_spr_dscr1_30C
	RTS
; End of function sub_3F8FA

; =============== S U B	R O U T	I N E =======================================

sub_3F918:
	a_to_stack inv_spr_dscr1_30C
	set inv_spr_dscr1_30C, #0

loc_3F921:
	LDA	(ptr_0),Y
	EOR	#$FF
	STA	ppu_data_70,X
	INX
	INY
	INC	inv_spr_dscr1_30C
	if_a_greater_cmp_addr inv_spr_dscr1_30C, #8, loc_3F921
	from_stack_to_a inv_spr_dscr1_30C
	RTS
; End of function sub_3F918

; =============== S U B	R O U T	I N E =======================================

sub_3F938:
	a_to_stack inv_spr_dscr1_30C
	set inv_spr_dscr1_30C, #0

loc_3F941:
	set_inx {ppu_data_70,X}, #0
	INC	inv_spr_dscr1_30C
	if_a_greater_cmp_addr inv_spr_dscr1_30C, #8, loc_3F941
	from_stack_to_a inv_spr_dscr1_30C
	RTS
; End of function sub_3F938

; =============== S U B	R O U T	I N E =======================================

sub_3F955:
	a_to_stack inv_spr_dscr1_30C
	set inv_spr_dscr1_30C, #0

loc_3F95E:
	set_inx {ppu_data_70,X}, #$FF
	INC	inv_spr_dscr1_30C
	if_a_greater_cmp_addr inv_spr_dscr1_30C, #8, loc_3F95E
	from_stack_to_a inv_spr_dscr1_30C
	RTS
; End of function sub_3F955

; =============== S U B	R O U T	I N E =======================================

sub_3F972:
	LDY	tilemapHeight_30A

loc_3F975:
	if_y_equal_cmp #0, loc_3F98D
	add_byte_to_byte_clc ppu_unk_byte_309, byte_363
	add_2_to ppu_unk_byte_309
	DEY
	JMP	loc_3F975
; ---------------------------------------------------------------------------

loc_3F98D:
	set ptr_0, ppu_unk_byte_303
	div_a_by_8_addr ppu_scroll_x_304
	add_to_a tilemap_size_307
	STA	tilemap_size_307
	if_a_greater_cmp #$20, loc_3F9A9
	sub_a_sec #$20 
	STA	tilemap_size_307

loc_3F9A9:
	div_a_by_8_addr ppu_scroll_y_305
	add_to_a ppu_unk_byte_309
	STA	ppu_unk_byte_309
	if_a_greater_cmp #$1E, loc_3F9C2
	sub_a_sec #$1E
	STA	ppu_unk_byte_309
	INC	ptr_0

loc_3F9C2:
	load_a_masked ptr_0, #1
	BEQ	loc_3F9D3
	set data_2, #0
	set data_3, #$28 
	JMP	loc_3F9DB
; ---------------------------------------------------------------------------

loc_3F9D3:
	set data_2, #0
	set data_3, #$20 

loc_3F9DB:
	LDY	ppu_unk_byte_309

loc_3F9DE:
	if_y_equal_cmp #0, loc_3F9F3

	add_word_to_word_imm data_2, $20

	DEY
	JMP	loc_3F9DE
; ---------------------------------------------------------------------------

loc_3F9F3:
	LDA	#0
	LDY	tilemapWidth_308

loc_3F9F8:
	if_y_equal_cmp #0, loc_3FA07
	add_to_a #2
	add_to_a byte_362
	DEY
	JMP	loc_3F9F8
; ---------------------------------------------------------------------------

loc_3FA07:
	add_to_a tilemap_size_307
	STA	tilemap_size_307
	if_a_greater_cmp #$20, loc_3FA18
	sub_a_sec #$20 
	STA	tilemap_size_307

loc_3FA18:
	add_byte_to_word data_2, tilemap_size_307

	RTS
; End of function sub_3F972

; =============== S U B	R O U T	I N E =======================================

sub_3FA27:
	if_a_not_equal_cmp_addr ppu_unk_byte_309, #$1D, loc_3FA48
	if_a_greater_cmp_addr data_3, #$28, loc_3FA3B
	set data_3, #$20 
	JMP	loc_3FA3F
; ---------------------------------------------------------------------------

loc_3FA3B:
	set data_3, #$28 

loc_3FA3F:
	and_byte data_2, #$1F
	JMP	locret_3FA55
; ---------------------------------------------------------------------------

loc_3FA48:
	add_word_to_word_imm data_2, $20

locret_3FA55:
	RTS
; End of function sub_3FA27

Common_Code_03:
	.include "common/common_funcs.asm"

; ---------------------------------------------------------------------------
	.include "garbage/bank_03_garbage.asm"

Vectors_03:
	.WORD NMI_FD53
	.WORD off_3805B
	.WORD return_FDCA
; end of 'BANK_03'

; ===========================================================================